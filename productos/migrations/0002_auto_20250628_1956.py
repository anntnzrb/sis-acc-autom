# Generated by Django 5.2.2 on 2025-06-29 00:56

import os
import shutil
from decimal import Decimal
from django.db import migrations
from django.conf import settings


def populate_productos(apps, schema_editor):
    """Populate productos with mock data and images."""
    Producto = apps.get_model('productos', 'Producto')
    
    # Skip if products already exist
    if Producto.objects.exists():
        return
    
    # Create media directory if it doesn't exist
    media_productos_dir = os.path.join(settings.MEDIA_ROOT, 'productos')
    os.makedirs(media_productos_dir, exist_ok=True)
    
    # Source directory for fixture images
    fixtures_dir = os.path.join(settings.BASE_DIR, 'static', 'fixtures', 'productos')
    
    # Mock product data for automotive accessories (CarriAcces)
    productos_data = [
        {
            'nombre': 'Llantas Deportivas Aleación',
            'descripcion': 'Llantas deportivas de aleación de 17 pulgadas, diseño moderno con acabado negro mate. Perfectas para mejorar el rendimiento y la estética de tu vehículo. Compatible con la mayoría de automóviles compactos y sedanes.',
            'precio': Decimal('450.00'),
            'iva': 15,
            'imagen_filename': 'llantas_deportivas.jpg'
        },
        {
            'nombre': 'Sistema Audio Premium',
            'descripcion': 'Sistema de audio premium con tecnología Bluetooth 5.0, sonido surround y ecualizador digital. Incluye amplificador de 4 canales y subwoofer integrado. Fácil instalación con kit completo incluido.',
            'precio': Decimal('320.75'),
            'iva': 15,
            'imagen_filename': 'sistema_audio.png'
        },
        {
            'nombre': 'Kit Iluminación LED Interior',
            'descripcion': 'Kit completo de iluminación LED para interior del vehículo. Incluye tiras LED RGB multicolor con control remoto, instalación plug-and-play. Crea ambiente personalizado con 16 millones de colores disponibles.',
            'precio': Decimal('89.99'),
            'iva': 0,
            'imagen_filename': 'led_interior.jpg'
        }
    ]
    
    for producto_data in productos_data:
        # Copy image from fixtures to media directory
        imagen_filename = producto_data.pop('imagen_filename')
        source_path = os.path.join(fixtures_dir, imagen_filename)
        dest_path = os.path.join(media_productos_dir, imagen_filename)
        
        imagen_path = None
        if os.path.exists(source_path):
            try:
                shutil.copy2(source_path, dest_path)
                imagen_path = f'productos/{imagen_filename}'
            except Exception:
                pass  # Ignore image copy errors, create product without image
        
        # Create product
        Producto.objects.create(
            **producto_data,
            imagen=imagen_path
        )


def reverse_populate_productos(apps, schema_editor):
    """Remove populated productos."""
    Producto = apps.get_model('productos', 'Producto')
    Producto.objects.all().delete()


class Migration(migrations.Migration):

    dependencies = [
        ('productos', '0001_initial'),
    ]

    operations = [
        migrations.RunPython(populate_productos, reverse_populate_productos),
    ]
